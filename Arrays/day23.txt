Video Questions:

1. Linear Search (GeekforGeeks)

class Solution {
  public:
    int search(vector<int>& arr, int x) {
        // code here
        for(int i=0; i < arr.size(); ++i){
            if(x == arr[i]) return i;
        }
        return -1;
    }
};

2. Reverse Array

void reverse_array(int arr[], int n){
    for(int i=0; i < (n/2); ++i){
        swap(arr[i],arr[n-i-1]);
    }
}

3. 2nd Largest Element in Array (GeekforGeeks)

int getSecondLargest(int *arr, int n) {
    // code here
    int max1 = -1, max2 = -1;
    for(int i=0; i<n; ++i){
        if(max1 < arr[i]){
            max2 = max1;
            max1 = arr[i];
        }
        else if(arr[i] > max2 && arr[i] < max1) max2 = arr[i];
    }
    return max2;
}


4. Missing Number in Array (GeekforGeeks)

int missingNum(int *arr, int size) {
    // code here
    int sum = (size+1)*(size+2)/2;
    int arrsum = 0;
    for(int i=0; i<size; ++i){
        arrsum += arr[i];
    }
    return sum - arrsum;
}


int missingNum(int *arr, int size) {
    // code here
    int sum1=0,sum2=0,x=0;
    for(int i=0;i<size;i++){
        sum1+=arr[i];
    }
    for(int j=1;j<=size+1;j++){
        sum2+=j;
    }
    x=sum2-sum1;
    return x;
}

5. Fibonacci Series in Array

int fib(int n){
    int arr[1000];
    arr[0] = 0; arr[1] = 1;
    for(int i=2; i<n; i++){
        arr[i] = arr[i-1] + arr[i-2];
    }
    return arr[n];
}

6. Cyclic Rotate Array By 1 (GeekforGeeks)

class Solution {
  public:
    void rotate(vector<int> &arr) {
        // code here
        int n = arr.size();
        int temp = arr[n-1];
        for(int i = n-1; i >= 0; --i){
            arr[i+1] = arr[i];
        }
        arr[0] = temp;
    }
};

Homework

1. Smallest Positive Missing (Leetcode 41)

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int k = 1;
        for(int i=0; i<nums.size(); ++i){
            if(nums[i] == k) k++;
            else if(nums[i] > k) break;
        }
        return k;
    }
};

2. Move all Negative Elements to end (GeekforGeeks)

class Solution {
  public:
    void segregateElements(vector<int>& arr) {
        vector<int> pos, neg;
        for (int x : arr) {
            if (x >= 0) pos.push_back(x);
            else neg.push_back(x);
        }
        int idx = 0;
        for (int x : pos) arr[idx++] = x;
        for (int x : neg) arr[idx++] = x;
    }
};

3. Number of Occurences (GeekforGeeks)

class Solution {
  public:
    int countFreq(vector<int>& arr, int target) {
        // code here
        int count = 0;
        for(int i=0; i < arr.size(); ++i){
            if(target == arr[i]) count++;
        }
        return count;
    }
};

4. Count number of elements between two given elements in array (GeekforGeeks)

class Solution {
public:
    int getCount(vector<int> &arr, int num1, int num2) {
        int n = arr.size();
        int idx1 = -1, idx2 = -1;

        for (int i = 0; i < n; i++) {
            if (arr[i] == num1) {
                idx1 = i;
                break;
            }
        }

        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] == num2) {
                idx2 = i;
                break;
            }
        }

        if (idx1 == -1 || idx2 == -1 || idx2 <= idx1)
            return 0;

        return idx2 - idx1 - 1;
    }
};

5. First Repeating Element (GeekforGeeks)

My Method(run time exceeded)
class Solution {
  public:
    int firstRepeated(vector<int> &arr) {
        // code here
        for(int i=0; i < arr.size(); ++i){
            int query = arr[i];
            for(int j=i+1; j < arr.size(); ++i){
                if(query == arr[j]) return i+1;
            }
        }
        return -1;
    }
};

Cheating Solution
class Solution {
public:
    int firstRepeated(vector<int> &arr) {
        int n = arr.size();
        if(n == 0) return -1;

        int maxVal = arr[0];
        for(int i = 1; i < n; ++i) {
            if(arr[i] > maxVal) maxVal = arr[i];
        }

        vector<int> freq(maxVal + 1, 0);

        for(int i = 0; i < n; ++i) {
            freq[arr[i]]++;
        }

        for(int i = 0; i < n; ++i) {
            if(freq[arr[i]] > 1) return i + 1;
        }

        return -1;
    }
};

6. Sum of Unique Elements (Leetcode 1748)

class Solution {
public:
    int sumOfUnique(vector<int>& nums) {
        int freq[101] = {0};

        for(int num : nums) {
            freq[num]++;
        }

        int sum = 0;
        for(int i = 0; i <= 100; ++i) {
            if(freq[i] == 1) sum += i;
        }

        return sum;
    }
};